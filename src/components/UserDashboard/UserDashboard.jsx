import React, { useEffect, useState } from 'react'
import { useAppContext } from '../../context/AppContext'
import MasterCard from '../MasterCard'

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç –ø–æ –¥–Ω—è–º
function isSameDay(dateA, dateB) {
	return (
		dateA.getFullYear() === dateB.getFullYear() &&
		dateA.getMonth() === dateB.getMonth() &&
		dateA.getDate() === dateB.getDate()
	)
}

const UserDashboard = () => {
	const {
		user,
		masters,
		masterImages,
		getOffers,
		refreshMasters,
		refreshMasterImages,
		loading: appLoading,
		error: appError,
	} = useAppContext()

	const [orders, setOrders] = useState([])
	const [userMasters, setUserMasters] = useState([])
	const [activeOrders, setActiveOrders] = useState([])
	const [pastOrders, setPastOrders] = useState([])
	const [upcomingNotifications, setUpcomingNotifications] = useState([])
	const [hasAppointmentToday, setHasAppointmentToday] = useState(false)
	const [loading, setLoading] = useState(true)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		const loadMasters = async () => {
			await refreshMasters()
			await refreshMasterImages()
		}

		loadMasters()
	}, [])

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –∏—Ö –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	useEffect(() => {
		const fetchDashboardData = async () => {
			setLoading(true)

			const ordersResult = await getOffers()
			if (!ordersResult?.success) {
				setLoading(false)
				return
			}

			const ordersData = ordersResult.data || []
			setOrders(ordersData)

			const masterIds = [
				...new Set(ordersData.map((order) => order.master)),
			].filter(Boolean)
			const matchedMasters = masters.filter((m) =>
				masterIds.includes(m._id),
			)
			setUserMasters(matchedMasters)

			const today = new Date()
			const currentTimestamp = today.getTime()

			const active = []
			const past = []
			const notifications = []

			ordersData.forEach((order) => {
				// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
				const timeParts = order.time?.split('-')[0]?.split(':') || [
					'00',
					'00',
				]
				const [hours, minutes] = timeParts.map(Number)

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º yearNumber, monthNumber –∏ day –∏–∑ –∑–∞–∫–∞–∑–∞
				const orderDate = new Date(
					parseInt(order.yearNumber) || today.getFullYear(),
					parseInt(order.monthNumber) - 1 || 0,
					parseInt(order.day) || 1,
					hours,
					minutes,
					0,
					0,
				)

				const orderTimestamp = orderDate.getTime()
				const diffInMs = orderTimestamp - currentTimestamp
				const diffInHours = diffInMs / (1000 * 60 * 60)

				if (diffInMs > 0 && diffInHours <= 1) {
					notifications.push({ ...order, orderDate })
				}

				if (orderTimestamp >= currentTimestamp) {
					active.push(order)
				} else {
					past.push(order)
				}
			})

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å—å
			const todayDate = new Date()
			const hasToday = active.some((order) => {
				const orderDate = new Date(
					parseInt(order.yearNumber),
					parseInt(order.monthNumber) - 1,
					parseInt(order.day),
				)
				return isSameDay(orderDate, todayDate)
			})
			setHasAppointmentToday(hasToday)

			setActiveOrders(active)
			setPastOrders(past)
			setUpcomingNotifications(notifications)
			setLoading(false)
		}

		fetchDashboardData()
	}, [getOffers, masters])

	if (!user) {
		return (
			<div className="flex justify-center items-center h-screen">
				<p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç</p>
			</div>
		)
	}

	if (appLoading || loading) {
		return (
			<div className="flex justify-center items-center h-64">
				<div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-600"></div>
			</div>
		)
	}

	if (appError) {
		return (
			<div className="bg-red-100 text-red-700 p-4 rounded-md m-8">
				{appError}
			</div>
		)
	}

	return (
		<div className="bg-gray-50 min-h-screen">
			<main className="container mx-auto px-4 py-8">
				<h1 className="text-3xl font-bold mb-6 text-center">
					–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
				</h1>

				{/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å –∑–∞–ø–∏—Å—å */}
				{hasAppointmentToday && upcomingNotifications.length === 0 && (
					<div className="mb-6">
						<div className="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4 rounded-md shadow-sm">
							<p className="font-medium">
								üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–ø–∏—Å—å.
							</p>
							<p className="text-sm mt-1">
								–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏¬ª.
							</p>
						</div>
					</div>
				)}

				{/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–ø–∏—Å—è—Ö */}
				{upcomingNotifications.length > 0 && (
					<div className="mb-6">
						{upcomingNotifications.map((notification) => {
							const timeParts = notification.time
								.split('-')[0]
								.split(':')
							const [hours, minutes] = timeParts.map(Number)
							const orderDate = new Date(
								notification.yearNumber,
								notification.monthNumber - 1,
								notification.day,
								hours,
								minutes,
							)
							const now = new Date()
							const diffInMs = orderDate - now
							const diffInMinutes = Math.floor(
								diffInMs / (1000 * 60),
							)

							return (
								<div
									key={notification._id}
									className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-md shadow-sm"
								>
									<p className="font-medium">
										‚ö†Ô∏è –î–æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–ª–æ—Å—å{' '}
										<strong>{diffInMinutes} –º–∏–Ω</strong>
									</p>
									<p>
										{notification.day}.
										{notification.monthNumber}.
										{notification.yearNumber},{' '}
										{notification.time}
									</p>
								</div>
							)
						})}
					</div>
				)}

				{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
				<section className="bg-white shadow rounded-lg p-6 mb-8">
					<h2 className="text-xl font-semibold mb-4">–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</h2>
					<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
						<p>
							<strong>–ò–º—è:</strong>{' '}
							{user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
						</p>
						<p>
							<strong>–§–∞–º–∏–ª–∏—è:</strong>{' '}
							{user.family_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
						</p>
						<p>
							<strong>Email:</strong> {user.email}
						</p>
						<p>
							<strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong>{' '}
							{user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
						</p>
					</div>
				</section>

				{/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ */}
				<section className="mb-8">
					<h2 className="text-2xl font-semibold mb-4">
						–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
					</h2>
					{activeOrders.length === 0 ? (
						<p className="text-gray-500 italic">
							–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
						</p>
					) : (
						<ul className="space-y-4">
							{activeOrders.map((order) => {
								const master = masters.find(
									(m) => m._id === order?.master,
								)
								return (
									<li
										key={order._id}
										className="bg-white shadow rounded-lg p-4"
									>
										<div className="flex justify-between">
											<div>
												<p>
													<strong>–ú–∞—Å—Ç–µ—Ä:</strong>{' '}
													{master?.first_name ||
														'–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
												</p>
												<p>
													<strong>–î–∞—Ç–∞:</strong>{' '}
													{order.day}-{' '}
													{order.monthNumber}-{' '}
													{order.yearNumber}
												</p>
												<p>
													<strong>–í—Ä–µ–º—è:</strong>{' '}
													{order.time}
												</p>
											</div>
										</div>
									</li>
								)
							})}
						</ul>
					)}
				</section>

				{/* –ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ */}
				<section className="mb-8">
					<h2 className="text-2xl font-semibold mb-4">
						–ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏
					</h2>
					{pastOrders.length === 0 ? (
						<p className="text-gray-500 italic">
							–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
						</p>
					) : (
						<ul className="space-y-4">
							{pastOrders.map((order) => {
								const master = masters.find(
									(m) => m._id === order?.master,
								)
								return (
									<li
										key={order._id}
										className="bg-white shadow rounded-lg p-4"
									>
										<div className="flex justify-between">
											<div>
												<p>
													<strong>–ú–∞—Å—Ç–µ—Ä:</strong>{' '}
													{master?.first_name ||
														'–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
												</p>
												<p>
													<strong>–î–∞—Ç–∞:</strong>{' '}
													{order.day}-{' '}
													{order.monthNumber}-{' '}
													{order.yearNumber}
												</p>
												<p>
													<strong>–í—Ä–µ–º—è:</strong>{' '}
													{order.time}
												</p>
											</div>
										</div>
									</li>
								)
							})}
						</ul>
					)}
				</section>

				{/* –ú–∞—Å—Ç–µ—Ä–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –∑–∞–ø–∏—Å–∏ */}
				<section>
					<h2 className="text-2xl font-semibold mb-4">
						–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
					</h2>
					{userMasters.length === 0 ? (
						<p className="text-gray-500 italic">
							–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä–∞ –±–æ–ª—å—à–µ
							–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
						</p>
					) : (
						<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
							{userMasters.map((master) => (
								<MasterCard
									key={master._id}
									master={master}
									masterImage={masterImages.find(
										(img) => img.master === master._id,
									)}
								/>
							))}
						</div>
					)}
				</section>
			</main>
		</div>
	)
}

export default UserDashboard
